{"version":3,"sources":["components/app.jsx","reportWebVitals.js","index.js"],"names":["App","state","count","intervalId","incrementCount","setState","decrementCount","startTimer","setInterval","alert","clearInterval","stopTimer","resetTimer","className","onClick","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA6EeA,E,4MArEXC,MAAQ,CACJC,MAAO,G,EAGXC,WAAa,K,EAGbC,eAAiB,WACb,EAAKC,SAAS,CAAEH,MAAO,EAAKD,MAAMC,MAAQ,K,EAG9CI,eAAiB,WACT,EAAKL,MAAMC,MAAQ,GACnB,EAAKG,SAAS,CAAEH,MAAO,EAAKD,MAAMC,MAAQ,K,EAIlDK,WAAa,WACL,EAAKN,MAAMC,MAAQ,IAAM,EAAKC,aAC9B,EAAKA,WAAaK,aAAY,WAC1B,EAAKH,SAAS,CAAEH,MAAO,EAAKD,MAAMC,MAAQ,IACtC,WAC6B,IAArB,EAAKD,MAAMC,QACXO,MAAM,iBACNC,cAAc,EAAKP,YACnB,EAAKA,WAAa,WAG/B,O,EAIXQ,UAAY,WACJ,EAAKR,aACLO,cAAc,EAAKP,YACnB,EAAKA,WAAa,O,EAK1BS,WAAa,WACT,EAAKP,SAAS,CAAEH,MAAO,IACvBQ,cAAc,EAAKP,YACnB,EAAKA,WAAa,M,4CAGtB,WACI,OACI,qBAAKU,UAAU,MAAf,SACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,UAAd,mBACA,sBAAKA,UAAU,kBAAf,UACI,wBAAQA,UAAU,MAAMC,QAASC,KAAKT,eAAtC,iBACA,sBAAMO,UAAU,OAAhB,SAAwBE,KAAKd,MAAMC,QACnC,wBAAQW,UAAU,MAAMC,QAASC,KAAKX,eAAtC,oBAEJ,sBAAKS,UAAU,aAAf,UACI,wBAAQA,UAAU,MAAMC,QAASC,KAAKR,WAAtC,mBACA,wBAAQM,UAAU,MAAMC,QAASC,KAAKJ,UAAtC,kBACA,wBAAQE,UAAU,MAAMC,QAASC,KAAKH,WAAtC,mBACA,0E,GA/DVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a39f8cd6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './app.style.css'\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        count: 0\r\n    }\r\n\r\n    intervalId = null;\r\n\r\n\r\n    incrementCount = () => {\r\n        this.setState({ count: this.state.count + 1 })\r\n    };\r\n\r\n    decrementCount = () => {\r\n        if (this.state.count > 0) {\r\n            this.setState({ count: this.state.count - 1 });\r\n        }\r\n    };\r\n\r\n    startTimer = () => {\r\n        if (this.state.count > 0 && !this.intervalId) {\r\n            this.intervalId = setInterval(() => {\r\n                this.setState({ count: this.state.count - 1 },\r\n                    () => {\r\n                        if (this.state.count === 0) {\r\n                            alert('Timer Finised');\r\n                            clearInterval(this.intervalId);\r\n                            this.intervalId = null;\r\n                        }\r\n                    })\r\n            }, 1000)\r\n        }\r\n    }\r\n\r\n    stopTimer = () => {\r\n        if (this.intervalId) {\r\n            clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n\r\n        }\r\n    }\r\n\r\n    resetTimer = () => {\r\n        this.setState({ count: 0 })\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <div className='main'>\r\n                    <div className='timer-area'>\r\n                        <h1 className='heading'>Timer</h1>\r\n                        <div className='container first'>\r\n                            <button className='btn' onClick={this.decrementCount}> - </button>\r\n                            <span className='span'>{this.state.count}</span>\r\n                            <button className='btn' onClick={this.incrementCount}> + </button>\r\n                        </div>\r\n                        <div className='container '>\r\n                            <button className='btn' onClick={this.startTimer}>start</button>\r\n                            <button className='btn' onClick={this.stopTimer}>stop</button>\r\n                            <button className='btn' onClick={this.resetTimer}>reset</button>\r\n                            <p>Created By Md. Samiul Ahmed</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}